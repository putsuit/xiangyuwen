属性 ： 有主就叫
变量：var a = 5  无主  为window
方法前面加主   arr.function(){  alear ('')   } arr.function();
把变量变属性  把函数变方法
用一个东西接受  对象就是实例化对象


 如果不传递参数  加了NEW等于函数调用  首字母大写
new 之后 会是THIS 指向对象 返回的直接是obj
如果你还是加return后面是对象类型  返回值就是return后面的值 如果不是对象就会返回原本的对象的东西（new的东西）


原型
	protope	每个函数都自己带这个属性和方法  其中有个有个protope的方法
	解决实例化对象使用方法时 优化性能
	protope 的值就是对象
JS的

		实例化对象上如果没有某个属性和方法  就是调用原型

	protope这个只给该构造函数实例化才能用

--proto-- 原型链  对象上一定有原型链   构造函数的原型
实例化的原型链 等于 构造函数的原型   原型链 就是  实例化对象跟 构造函数原型的桥梁


let 和 var 区别  

在全局声明的时候  let不会在window下注册   var 的话会

暂存死区 没有预解析 声明之后才能使用  会报错

支持块级作用预  { }

把变量提取出来   

拆 function   变量变属性   函数变方法


去重复[...Set(arr)]



包装对象  属性不能用 方法能用

toString  把当前数据专程字符串的方法   每种属性类型都有tostring方法

调用alert  会自动调用tostring 的方法

call(指向修改THIS 之后的参数就是实参)

apply(修改后的this ,[实参])

obj的tostring方法 第二个参数能查看  数据类型




